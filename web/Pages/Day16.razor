@page "/2024/day16"

@if (StateContainer is null)
{
    <p>Loading...</p>
}
else
{
    <div class="container">

        <div>
            <p style="font-weight: 500">Best Score:</p>
            <p>@(StateContainer.LowestTotalCost?.ToString() ?? "???")</p>
        </div>

        <div>
            <p style="font-weight: 500"># Paths:</p>
            <p>@StateContainer.Runners.SelectMany(x => x.Path).Distinct().Count()</p>
        </div>

        <div>
            <p style="font-weight: 500">Solutions:</p>
            <div style="display: flex; gap: 1rem; flex-wrap: wrap">
                <label for="selectedSolutionAll">
                    <input id="selectedSolutionAll" name="selectedSolution" type="radio" @onchange="() => Select(null)" checked="@(SelectedSolution == null)" />
                    <text>All</text>
                </label>
                @for (var i = 0; i < StateContainer.Runners.Count; i++)
                {
                    var runner = StateContainer.Runners[i];
                    var isSelected = SelectedSolution == runner;

                    <label for="selectedSolution@(i + 1)">
                        <input id="selectedSolution@(i + 1)" name="selectedSolution" type="radio" @onchange="() => Select(runner)" checked="@isSelected"/>
                        <text>Solution @(i + 1)</text>
                    </label>
                }
            </div>
        </div>

        <div class="grid" style="@CreateGridTemplateCss(StateContainer.Maze)">

            <div class="start" style="@CreateGridCellCss(StateContainer.Start)"></div>
            <div class="target" style="@CreateGridCellCss(StateContainer.Target)"></div>

            @foreach (var rect in StateContainer.Maze.Walls)
            {
                <div class="wall" style="@CreateGridCellCss(rect)"></div>
            }

            @foreach (var (pos, scores) in GetScoresForSolutions())
            {
                foreach (var score in scores)
                {
                    <div class="selected" style="@CreateGridCellCss(pos)">
                        @if (score == scores[0])
                        {
                            <span class="score">@score</span>
                        }
                    </div>
                }
            }
        </div>
    </div>
    
    <button type="button" @onclick="Next">Next</button>
}

@code {

    private void Next() => StateContainer!.MoveNext();
    
    private static string CreateGridTemplateCss(Maze2D maze)
    {
        return $"grid-template-columns: repeat({maze.Width}, calc(100cqw / {maze.Width})); grid-template-rows: repeat({maze.Height}, calc(100cqw / {maze.Width}));";
    }

    private static string CreateGridCellCss(Vector2D position)
    {
        return $"grid-row-start: {position.Y + 1}; grid-column-start: {position.X + 1};";
    }

    private Dictionary<Vector2D, List<long>> GetScoresForSolutions()
    {
        return (SelectedSolution?.History ?? StateContainer!.Runners.SelectMany(x => x.History))
            .GroupBy(x => x.Position, x => x.Cost)
            .ToDictionary(x => x.Key, x => x.Order().ToList());
    }

}