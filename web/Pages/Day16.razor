@page "/2024/day16"

@if (Maze is null)
{
    <p>Loading...</p>
}
else
{
    <div class="container">
        
        <div>
            <p>Winners:</p>
            <ol>
                @foreach (var runner in Maze.Runners.Where(x => x.Position == Maze.Target).OrderBy(x => x.Id))
                {
                    <li @onclick="() => Select(runner)" style="@(SelectedRunner == runner ? "background: hotpink;" : "")">@runner.Score</li>
                }
            </ol>
        </div>
        
        <div class="grid" style="@CreateGridTemplateCss(Maze)">

            @foreach (var runner in Maze.Runners)
            {
                <div class="runner @(runner.IsDead ? "dead" : "")" style="@CreateGridCellCss(runner.Position)" @onclick="() => Select(runner)">
                    @*<span class="eye facing@(GetDirectionDescription(runner.Facing))"></span>*@
                </div>

                foreach (var (maybe, direction) in runner.EnumeratePossibleNextSteps())
                {
                    var goodness = runner.Position + runner.Direction == maybe ? "good" : "ok";
                    <div class="@goodness" style="@CreateGridCellCss(maybe); pointer-events: none">
                        @GetDirectionDescription(direction)
                    </div>
                }
            }

            @if (SelectedRunner is not null)
            {
                for (var i = 0; i < SelectedRunner.Visited.Count; i++)
                {
                    <div style="@CreateGridCellCss(SelectedRunner.Visited.ElementAt(i).Key); background-color: deeppink; opacity: 0.5"></div>
                }
            }
            
            <div class="target" style="@CreateGridCellCss(Maze.Target)"></div>

            @foreach (var (position, _) in Maze.Walls)
            {
                <div class="wall" style="@CreateGridCellCss(position)"></div>
            }
            
            @*@foreach (var badPosition in Maze.BadPositions)
            {
                <div style="@CreateGridCellCss(badPosition); background: transparent;">💩</div>
            }*@
        </div>

        <button class="button" @onclick="Move">Move</button>

    </div>
}

@code {

    private static string CreateGridTemplateCss(CSharp.Day16.MazeModel maze)
    {
        return $"grid-template-columns: repeat({maze.Width}, calc(100cqw / {maze.Width})); grid-template-rows: repeat({maze.Height}, calc(100cqw / {maze.Width}));";
    }

    private static string CreateGridCellCss(Vector2D position)
    {
        return $"grid-row-start: {position.Y + 1}; grid-column-start: {position.X + 1};";
    }

    private static string GetDirectionDescription(Vector2D facing)
    {
        if (facing == Vector2D.Up) return "N";
        if (facing == Vector2D.Down) return "S";
        if (facing == Vector2D.Left) return "W";
        if (facing == Vector2D.Right) return "E";
        return string.Empty;
    }
}