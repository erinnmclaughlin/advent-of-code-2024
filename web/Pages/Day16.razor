@page "/2024/day16"

@if (Maze is null)
{
    <p>Loading...</p>
}
else
{
    <div class="container">
        <div class="grid" style="@CreateGridTemplateCss(Maze)">

            <div class="start" style="@CreateGridCellCss(Start)">
                
            </div>
            
            <div class="current" style="@CreateGridCellCss(Current)">
                👟
            </div>
            
            <div class="target" style="@CreateGridCellCss(Target)">
                🏁
            </div>

            @foreach (var rect in Maze.Walls)
            {
                <div class="wall" style="@CreateGridCellCss(rect)"></div>
            }
            
            @foreach (var (pos, cost) in GetScoresAtPoints(Current, Direction))
            {
                <div class="next" style="@CreateGridCellCss(pos)">@cost</div>
            }
            
            @*
            @foreach (var (next, dir, cost) in GetNextDecisionPoints())
            {
                <div class="next" style="@CreateGridCellCss(next)">
                    @cost
                </div>

                foreach (var (next2, dir2, cost2) in GetNextDecisionPoints(next, dir))
                {
                    <div class="next2" style="@CreateGridCellCss(next2)">
                        @(cost + cost2)
                    </div>
                    
                    foreach (var (next3, dir3, cost3) in GetNextDecisionPoints(next2, dir2))
                    {
                        <div class="next3" style="@CreateGridCellCss(next3)">
                            @(cost + cost2 + cost3)
                        </div>
                    }
                }
            }*@
            
            @*@foreach (var dir in Maze.EnumerateOpenDirections(Current))
            {
                <div class="next" style="@CreateGridCellCss(Current + dir)">
                    @CalculateUnitCost(dir)
                </div>
            }*@
        </div>
    </div>
}

@code {

    private static string CreateGridTemplateCss(Maze2D maze)
    {
        return $"grid-template-columns: repeat({maze.Width}, calc(100cqw / {maze.Width})); grid-template-rows: repeat({maze.Height}, calc(100cqw / {maze.Width}));";
    }

    private static string CreateGridCellCss(Rectangle2D rect)
    {
        return $"grid-row-start: {rect.Position.Y + 1}; " +
               $"grid-row-end: { rect.Position.Y + rect.Height};" +
               $"grid-column-start: {rect.Position.X + 1};" +
               $"grid-column-end: { rect.Position.X + rect.Width};";
    }

    private static string CreateGridCellCss(Vector2D position)
    {
        return $"grid-row-start: {position.Y + 1}; grid-column-start: {position.X + 1};";
    }
}