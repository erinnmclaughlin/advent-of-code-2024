@page "/2024/day16"

@if (MazeRunner is null)
{
    <p>Loading...</p>
}
else
{
    <div class="container">

        <div style="display: flex; gap:  1rem; flex-wrap: wrap">
            <div>
                <p style="font-weight: 500">Best Score:</p>
                <p>@(Solutions.FirstOrDefault() is { } solution ? solution.Cost : -1)</p>
            </div>

            <div>
                <p style="font-weight: 500">Solutions:</p>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap">
                    <label for="selectedSolutionAll">
                        <input id="selectedSolutionAll" name="selectedSolution" type="radio" @onchange="() => SelectedSolution = null" checked="@(SelectedSolution == null)" />
                        <text>All</text>
                    </label>
                    @for (var i = 0; i < Solutions.Count; i++)
                    {
                        var s = Solutions[i];
                        var isSelected = SelectedSolution == s;

                        <label for="selectedSolution@(i + 1)">
                            <input id="selectedSolution@(i + 1)" name="selectedSolution" type="radio" @onchange="() => SelectedSolution = s" checked="@isSelected"/>
                            <text>Solution @(i + 1)</text>
                        </label>
                    }
                </div>
            </div>
        </div>

        <div class="grid" style="@CreateGridTemplateCss(MazeRunner.Maze)">

            <div class="start" style="@CreateGridCellCss(MazeRunner.StartPosition)">🏁</div>
            <div class="target" style="@CreateGridCellCss(MazeRunner.TargetPosition)">🛑</div>

            @foreach (var wall in MazeRunner.Maze.Walls)
            {
                <div class="wall" style="@CreateGridCellCss(wall)"></div>
            }
            
            @foreach (var pos in SelectedSolution?.EnumerateVisitedPositions().ToList() ?? Solutions.SelectMany(x => x.EnumerateVisitedPositions()))
            {
                <div class="selected" style="@CreateGridCellCss(pos)"></div>
            }
        </div>
    </div>
}

@code {

    private MazeRunnerState2D? SelectedSolution { get; set; }
    private List<MazeRunnerState2D> Solutions { get; set; } = [];
    
    private static string CreateGridTemplateCss(Maze2D maze)
    {
        return $"grid-template-columns: repeat({maze.Width}, calc(100cqw / {maze.Width})); grid-template-rows: repeat({maze.Height}, calc(100cqw / {maze.Width}));";
    }

    private static string CreateGridCellCss(Vector2D position)
    {
        return $"grid-row-start: {position.Y + 1}; grid-column-start: {position.X + 1};";
    }
}