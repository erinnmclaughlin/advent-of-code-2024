@page "/2024/day15"
@using static AoC.CSharp.Day15

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="container">
        
        <div class="history-grid">
            @for (var i = Index - 4; i < Index + 5; i++)
            {
                var isValidIndex = i >= 0 && i < Instructions.Length;
                var opacity = i == Index ? "1" : "0.5";
                var color = (isValidIndex ? MoveResults[i]?.Count : -1) switch
                {
                    0 => "darkred", // blocked
                    > 1 => "darkgreen", // boxes were pushed
                    _ => "darkslategray" // other
                };
                
                <span style="background-color: @color; opacity: @opacity">
                    @if (isValidIndex)
                    {
                        @Instructions[i]
                    }
                </span>
            }
        </div>

        <div class="grid">
            @if (Index > 0)
            {
                <div class="robot" style="opacity: 0.25; @GetGridCss(World.Robot.Position - ParseInstruction(Instructions[Index]) - ParseInstruction(Instructions[Index - 1]), 1)"></div>
            }
            @if (Index > -1)
            {
                <div class="robot" style="opacity: 0.5; @GetGridCss(World.Robot.Position - ParseInstruction(Instructions[Index]), 1)"></div>
            }
            <div class="robot" style="@GetGridCss(World.Robot);"></div>
            @foreach (var thing in World.MapObjects)
            {
                var recentnessCss = "";

                if (MoveResults.GetValueOrDefault(Index)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(2.25)";
                else if (MoveResults.GetValueOrDefault(Index - 1)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(2)";
                else if (MoveResults.GetValueOrDefault(Index - 2)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(1.75)";
                else if (MoveResults.GetValueOrDefault(Index - 3)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(1.5)";
                else if (MoveResults.GetValueOrDefault(Index - 4)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(1.25)";
                
                var cssClass = thing switch
                {
                    Box => "box",
                    Wall => "wall",
                    _ => "unknown"
                };

                <div class="@cssClass" style="@GetGridCss(thing); @recentnessCss"></div>
            }
        </div>

        <div class="buttons">
            @{
                var isPaused = _cts is null || _cts.IsCancellationRequested;
                @if (isPaused)
                {
                    <button style="background-color: darkgreen" disabled="@(Index == Instructions.Length - 1)" @onclick="AutoPlay">Autoplay</button>
                }
                else
                {
                    <button style="background-color: darkred" @onclick="Stop">Stop</button>
                }
            }
            <button disabled="@(Index == Instructions.Length - 1 || !isPaused)" @onclick="GoForward">Move 1</button>
        </div>
    </div>
}