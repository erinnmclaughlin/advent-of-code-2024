@page "/2024/day15"
@using static AoC.CSharp.Day15
@inject HttpClient HttpClient

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="container">
        
        <div class="history-grid">
            @for (var i = Index - 4; i < Index + 5; i++)
            {
                var isValidIndex = i >= 0 && i < Instructions.Length;
                var opacity = i == Index ? "1" : "0.5";
                var color = (isValidIndex ? MoveResults[i]?.Count : -1) switch
                {
                    0 => "red", // blocked
                    > 1 => "green", // boxes were pushed
                    _ => "darkslategray" // other
                };
                
                <span style="background-color: @color; opacity: @opacity">
                    @if (isValidIndex)
                    {
                        @Instructions[i]
                    }
                </span>
            }
        </div>

        <div class="grid">
            @if (Index > 0)
            {
                <div class="robot" style="opacity: 0.25; @GetGridCss(World.Robot.Position - ParseInstruction(Instructions[Index]) - ParseInstruction(Instructions[Index - 1]), 1)"></div>
            }
            @if (Index > -1)
            {
                <div class="robot" style="opacity: 0.5; @GetGridCss(World.Robot.Position - ParseInstruction(Instructions[Index]), 1)"></div>
            }
            <div class="robot" style="@GetGridCss(World.Robot);@(MoveResults.GetValueOrDefault(Index)?.Count == 0 ? "background-color: red;" : "")"></div>
            @foreach (var thing in World.GameObjects)
            {
                var recentnessCss = "";

                if (MoveResults.GetValueOrDefault(Index)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(2.5)";
                else if (MoveResults.GetValueOrDefault(Index - 1)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(2.25)";
                else if (MoveResults.GetValueOrDefault(Index - 2)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(2)";
                else if (MoveResults.GetValueOrDefault(Index - 3)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(1.75)";
                else if (MoveResults.GetValueOrDefault(Index - 4)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(1.5)";
                else if (MoveResults.GetValueOrDefault(Index - 5)?.Contains(thing) ?? false)
                    recentnessCss = "filter: brightness(1.25)";
                
                var cssClass = thing switch
                {
                    Box => "box",
                    Wall => "wall",
                    _ => "unknown"
                };

                <div class="@cssClass" style="@GetGridCss(thing); @recentnessCss"></div>
            }
        </div>

        <div class="buttons">
            @if (_cts is null || _cts.IsCancellationRequested)
            {
                <button style="cursor: pointer;" @onclick="AutoPlay">Autoplay</button>
            }
            else
            {
                <button style="cursor: pointer;" @onclick="Stop">Stop</button>
            }
            <button style="cursor: pointer;" @onclick="GoForward">Next</button>
        </div>
    </div>
}

@code {

    private CancellationTokenSource? _cts;
    
    private bool IsLoading { get; set; } = true;
    private World World { get; set; } = new();
    private char[] Instructions { get; set; } = [];
    private int Index { get; set; } = -1;
    private Dictionary<int, HashSet<GameObject>?> MoveResults { get; set; } = [];
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        var file = await HttpClient.GetStringAsync("day15.txt");
        var lines = file.Split("\r\n").ToArray().AsSpan();
        var splitIndex = lines.IndexOf(string.Empty);
        
        World = CreatePartTwoWorld(lines[..splitIndex]);
        Instructions = lines[(splitIndex + 1)..].ToArray().SelectMany(x => x.ToArray()).ToArray();
        MoveResults = Instructions.Index().Select(x => x.Index).ToDictionary(x => x, HashSet<GameObject>? (_) => null);
        
        IsLoading = false;
        StateHasChanged();
    }

    private async Task AutoPlay()
    {
        if (_cts is not null)
        {
            await _cts.CancelAsync();
            _cts.Dispose();
            _cts = null;
        }
        
        _cts = new CancellationTokenSource();
        
        for (var i = Index; i < Instructions.Length - 1; i++)
        {
            GoForward();
            StateHasChanged();
            
            if (_cts?.IsCancellationRequested ?? true)
                break;
            
            await Task.Delay(50);
            
            if (_cts?.IsCancellationRequested ?? true)
                break;
        }
    }

    private void Stop()
    {
        _cts?.Cancel();
    }

    private void GoForward()
    {
        Index++;
        var dir = ParseInstruction(Instructions[Index]);
        var results = new List<GameObject>();
        MoveResults[Index] = World.TryMove(World.Robot, dir, results) ? results.ToHashSet() : [];
    }

    private static string GetGridCss(GameObject obj)
    {
        return GetGridCss(obj.Position, obj.Width);
    }

    private static string GetGridCss(Vector2D pos, int width)
    {
        var (x, y) = (pos.X, pos.Y);
        return $"grid-column-start: {x + 1}; grid-column-end: {x + 1 + width}; grid-row-start: {y + 1}";
    }
}